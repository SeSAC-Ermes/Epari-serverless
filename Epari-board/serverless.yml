service: epari-board

frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-northeast-2'}
  environment:
    POSTS_TABLE: Epari-board-lhl
    STAGE: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - !GetAtt PostsTable.Arn
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::${self:custom.bucketName}/*

build:
  esbuild: false

custom:
  bucketName: epari-community-${self:provider.stage}
  esbuild:
    bundle: true
    minify: false #개발 단계에서는 디버깅을 위해 false로 설정
  external:
    - '@aws-sdk/*'
functions:
  getPosts:
    handler: src/handlers/posts/getPosts.handler
    events:
      - httpApi:
          path: /posts
          method: GET

  getPost:
    handler: src/handlers/posts/getPost.handler
    events:
      - httpApi:
          path: /posts/{postId}
          method: GET

  createPost:
    handler: src/handlers/posts/createPost.handler
    events:
      - httpApi:
          path: /posts
          method: POST

  updatePost:
    handler: src/handlers/posts/updatePost.handler
    events:
      - httpApi:
          path: /posts/{postId}
          method: PUT

  deletePost:
    handler: src/handlers/posts/deletePost.handler
    events:
      - httpApi:
          path: /posts/{postId}
          method: DELETE

  likePost:
    handler: src/handlers/posts/likePost.handler
    events:
      - httpApi:
          path: /posts/{postId}/like
          method: POST

  getComments:
    handler: src/handlers/comments/getComments.handler
    events:
      - httpApi:
          path: /posts/{postId}/comments
          method: GET

  createComment:
    handler: src/handlers/comments/createComment.handler
    events:
      - httpApi:
          path: /posts/{postId}/comments
          method: POST

  updateComment:
    handler: src/handlers/comments/updateComment.handler
    events:
      - httpApi:
          path: /posts/{postId}/comments/{commentId}
          method: PUT

  deleteComment:
    handler: src/handlers/comments/deleteComment.handler
    events:
      - httpApi:
          path: /posts/{postId}/comments/{commentId}
          method: DELETE

  createPresignedUrl:
    handler: src/handlers/uploads/createPresignedUrl.handler
    events:
      - httpApi:
          path: /uploads/presigned-url
          method: POST

  processImage:
    handler: src/handlers/uploads/processImage.handler
    events:
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploads/
            - suffix: .jpg

resources:
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.POSTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: [ '*' ]
              AllowedMethods: [ GET, PUT, POST, DELETE ]
              AllowedOrigins: [ '*' ]
              MaxAge: 3000

plugins:
  - serverless-esbuild
  - serverless-offline

package:
  individually: true
